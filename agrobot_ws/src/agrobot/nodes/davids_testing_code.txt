        
        # what to do with the downward image:
        
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        LOWER_GREEN = np.array([31, 43, 23])
        UPPER_GREEN = np.array([255, 255, 100])
        mask = cv2.inRange(hsv, LOWER_GREEN, UPPER_GREEN)
        
        kernel = np.ones((15,15),np.uint8)
        blur = cv2.GaussianBlur(mask,(31,31), 0)
        closed = cv2.morphologyEx(blur, cv2.MORPH_CLOSE, kernel)
        closed = cv2.dilate(closed, kernel, iterations=1)
        _, contours, hierarchy = cv2.findContours(closed, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        # cv2.drawContours(image, contours, -1, (0,144,144), -1)
        centroids = np.array([])
        
        for c in contours:
            if cv2.contourArea(c) > image.shape[0]**2 / 15:
                M = cv2.moments(c)
                cx = int(M["m10"] /  M["m00"]) 
                centroids = np.append(centroids, cx)
        # print("num of contours", len(centroids))
        if centroids is not None:
            bottom_x = centroids[np.argmin(abs(centroids - np.full_like(centroids, image.shape[1]/2)))]
        else:
            bottom_x = image.shape[1]/2

        # x,y = np.nonzero(mask)
        # m,b = np.polyfit(x,y,1)
        # start_point = (int(b), 0)
        # end_point = (int(m*800 + b), 800)
        # image = cv2.line(image, start_point, end_point, (255,0,0), 4)

        cv2.imshow('mask', closed)

        def cut_rectangle_mask(c1, c2):
            return closed[c1[1]:c2[1],c1[0]:c2[0]]
        def get_coverage(corner):
            return np.sum(corner)/255/(corner.shape[0]*corner.shape[1])


        front_left_c1, front_left_c2 = (int(width*0.15), int(height*0.05)), (int(width*0.3),int(height*0.25)) 
        front_left = cut_rectangle_mask(front_left_c1, front_left_c2)
        cv2.rectangle(image, front_left_c1, front_left_c2, (0, 255, 0), 3)

        front_right_c1, front_right_c2 = (int(width*0.7), int(height*0.05)), (int(width*0.85),int(height*0.25)) 
        front_right = cut_rectangle_mask(front_right_c1, front_right_c2)
        cv2.rectangle(image, front_right_c1, front_right_c2, (0, 255, 0), 3)

        back_left_c1, back_left_c2 = (int(width*0.15), int(height*0.75)), (int(width*0.3),int(height*0.95)) 
        back_left = cut_rectangle_mask(back_left_c1, back_left_c2)
        cv2.rectangle(image, back_left_c1, back_left_c2, (0, 255, 0), 3)

        back_right_c1, back_right_c2 = (int(width*0.7), int(height*0.75)), (int(width*0.85),int(height*0.95)) 
        back_right = cut_rectangle_mask(back_right_c1, back_right_c2)
        cv2.rectangle(image, back_right_c1, back_right_c2, (0, 255, 0), 3)

        collisions = [0,0,0,0]
        if get_coverage(front_left) > 0.2:
            cv2.rectangle(image, front_left_c1, front_left_c2, (0, 0, 255), 3)
            collisions[0] = 1
        if get_coverage(front_right) > 0.2:
            cv2.rectangle(image, front_right_c1, front_right_c2, (0, 0, 255), 3)
            collisions[1] = 1
        if get_coverage(back_left) > 0.2:
            cv2.rectangle(image, back_left_c1, back_left_c2, (0, 0, 255), 3)
            collisions[2] = 1
        if get_coverage(back_right) > 0.2:
            cv2.rectangle(image, back_right_c1, back_right_c2, (0, 0, 255), 3)
            collisions[3] = 1
        
        
        # cv2.imshow('front left', front_left)
        # cv2.imshow('front right', front_right)
        # cv2.imshow('back left', back_left)
        # cv2.imshow('back right', back_right)

        

        # if get_coverage(front_left) > 0.2:
        #     rectangle((dl*5, dl*1), (dl*8, dl*4))
        # if get_coverage(front_right) > 0.2:
        #     rectangle((dl*25, dl*1), (dl*28, dl*4))
        # if get_coverage(back_left) > 0.2:
        #     rectangle((dl*5, dl*1), (dl*8, dl*4))
        # if get_coverage(front_left) > 0.2:
        #     rectangle((dl*5, dl*1), (dl*8, dl*4))
        cv2.circle(image, (int(bottom_x), image.shape[1]/2), 20, (255, 255, 255), -1)
        cv2.imshow('downward image', image)
        cv2.waitKey(1)
        self.collisions_pub.publish(str(collisions))
        self.bottom_centroid_pub.publish(bottom_x)